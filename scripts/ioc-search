#! /bin/sh
###############################################################################
### Wrapper for SQL queries to clickhouse database on beast.lbl.gov
### 2019-06-28 MNSmitasin
#
# KNOWN ISSUES (2019-06-28):
# 1) IPv6 addresses are handled literally, there is no attempt to pad or abbreviate, or interpret the address differently
# 2) Unsorted columns search quite slow compared to sorted columns. Whenever possible, try to include a sorted column in your search
#    as this will reduce the data set that's searched on.
# 3) No support for multiple queries in a single command.
# 4) No support for specifying a file at this time.
# 5) The -b "bar" option will overlay output rows on top of each other, usually if -c is specified after it
# 6) The -V and -X options may output duplicate columns if you specify search criteria because it builds the columns to output from those
# 7) Only tested on FreeBSD, may not work on Linux due to different handling of 'date' options, possibly other issues
# 8) Due to needing to sort on 2 columns for conn logs, other statistics will have duplicate counts. For example, if you count the 
#    number of SF rows, you'll get twice as many as really occurred. This is because the ingest process dups rows in order to sort
#    by EITHER orig_h or resp_h.
#
###############################################################################
### LOCAL VARIABLES

# XXX Disable for prod
DEBUG="T"
DEBUGLOG="CLICKHOUSE-QUERY-debug.log"

# Contact
MAILTO="admin@example.com"

CLICKHOUSE_SERVER="clickhouse.example.com"
CHKEY="CLICKHOUSE-feeds.key"

# default values
FLAVOR="conn"
EXCLUSIVEBIT=""
LOOKBACK="90"
TARGET=""
PREWHERE=""
TRANSLATEDRESULTS=""
SEARCHMODE="="
ANDSEARCHTERMS=""
RESULTS="day"
GROUPBY="group by $RESULTS"

STARTDATE=$(date -j -v-"$LOOKBACK"d +"%Y-%m-%d")

###############################################################################
### FUNCTIONS

USAGE(){
echo ""
echo "Usage:"
echo "  -d [days to look back]  number of days back to search (default: $LOOKBACK)"
echo "  -l                      loose search all options after this (unless prohibited), wildcard char is %"
echo "  -c                      count occurrences"
echo "  -b [max value]          EXPERIMENTAL: draw a bar graph of counted occurrences, scaled to [max value]"
echo "                          (Known issue: if -b precedes -c, may cause output rows to be merged together)"
echo "  -X                      Show extra results (more columns, specific per table)"
echo "  -V                      Verbose mode; select all columns. Can be VERY slow!"
echo "  -Z                      Include the name of the Zeek cluster where the given record was found"
echo "  -Q                      Custom query, write whatever SQL-like query you want"
echo "  -n                      noop; show SQL query and exit"
echo ""
echo "Table-dependent options (table is set automatically based on option):"
echo "Zeek conn.log"
echo "  -i [ip_address]         same as 'orig_h OR resp_h'"
echo "  -O [orig_ip_address]"
echo "  -R [resp_ip_address]"
echo "  -D [dst_port]           unsorted (slow unless paired with sorted column)"
echo "  -S [src_port]           unsorted (slow unless paired with sorted column)"
echo "  -P [proto]              unsorted (slow unless paired with sorted column)"
echo "  -C [conn_state]         unsorted (slow unless paired with sorted column)"
echo ""
echo "Zeek http.log"
echo "  -h [host]"
echo "  -u [URI]                unsorted (slow unless paired with sorted column)"
echo ""
echo "Zeek dns.log"
echo "  -q [query]"
echo "  -a [answers]            i.e. reverse lookup of the query, unsorted (slow unless paired with sorted column)"
echo ""
echo "Zeek ssl.log"
echo "  -s [server_name]"
echo ""
echo "Zeek files.log"
echo "  -m [md5_hash]"
echo "  -1 [sha1_hash]          unsorted (slow unless paired with sorted column)"
echo ""
echo "Zeek smtp.log"
echo "  -F [mailfrom]"
echo "  -T [rcptto]             unsorted (slow unless paired with sorted column)"
echo ""
echo "Basic Examples:"
echo "  ${0##*/} -i 192.0.2.45                          conn.logs for IP as either orig_h or resp_h"
echo "  ${0##*/} -h example.com                         http.logs for hostname"
echo "  ${0##*/} -s example.com                         ssl.logs for server_name"
echo "  ${0##*/} -m 91db4e37d71fd51b5dd1x64836602440            files.logs for md5 hash"        
echo "  ${0##*/} -q example.com                         dns.logs for DNS query question"
echo "  ${0##*/} -F admin@example.com                           smtp.logs for sender email address"
echo ""
echo "Advanced Examples:"
echo "  ${0##*/} -l -i 192.0.2.% -P tcp -D 53                           conn.logs for 1st 3 octets of IP matching proto=tcp and dstport=53"
echo "  ${0##*/} -X -i 192.0.2.232 -d 30                                conn.logs for exact IP with extra columns, 30 days"
echo "  ${0##*/} -l -u %bitcoin% -d 10                          http.logs for URI containing string, 10 days"
echo "  ${0##*/} -F admin@example.com -l -T %@lbl.gov           smtp.logs from specific sender, and to whole domain"
echo "  ${0##*/} -Q \"SELECT count(day) FROM zeek_conn\"        custom query counting all rows in a table"
echo ""
exit 1
}

# check that some option is defined
if [ -z "$1" ]
then
  echo "Error: No options set."
  USAGE
fi

CHECKEXCLUSIVEBIT(){
  if [ -z "$EXCLUSIVEBIT" ]
  then
    EXCLUSIVEBIT="1"
  else
    echo "Error: cannot run multiple queries at once."
    exit 1
  fi
}

BUILDTABLE(){
  case $FLAVOR in
    conn) TABLE="zeek_conn" ;;
    http) TABLE="zeek_http" ;;
    dns) TABLE="zeek_dns" ;;
    files) TABLE="zeek_files" ;;
    ssl) TABLE="zeek_ssl" ;;
    smtp) TABLE="zeek_smtp" ;;
    *) echo "Error: $FLAVOR cannot be mapped to pre-defined table name" ;;
  esac
}

ADDTERMS(){
  ANDSEARCHTERMS="$ANDSEARCHTERMS AND $TERM $SEARCHMODE '$OPTARG'"
  RESULTS="$RESULTS, $TERM"
  GROUPBY="group by $RESULTS"
}

PREWHERE(){
  if [ -z "$PREWHERE" ]
  then
    PREWHERE="PREWHERE $1 $SEARCHMODE '$OPTARG'"
  else
    PREWHERE="$PREWHERE OR $1 $SEARCHMODE '$OPTARG'"
  fi
}

# XXX this is a hack for UInt16 not liking single quotes or LIKE searches
ADDHARDTERMS(){
  ANDSEARCHTERMS="$ANDSEARCHTERMS AND $TERM = $OPTARG"
  RESULTS="$RESULTS, $TERM"
  GROUPBY="GROUP BY $RESULTS"
}

# XXX this is a hack for Enums not liking LIKE but wanting single quotes
ADDHARDTERMS2(){
  ANDSEARCHTERMS="$ANDSEARCHTERMS AND $TERM = '$OPTARG'"
  RESULTS="$RESULTS, $TERM"
  GROUPBY="GROUP BY $RESULTS"
}

BUILDEXTRACOLUMNS(){
  if [ -z "$EXTRABIT" ]
  then
    :
  else
    case $FLAVOR in
      conn) EXTRACOLUMNS="orig_h, resp_h, resp_p, proto";;
      http) EXTRACOLUMNS="orig_h, orig_p, method, host, uri, status_code";;
      dns) EXTRACOLUMNS="orig_h, resp_h, query, qtype_name, answers";;
      ssl) EXTRACOLUMNS="orig_h, resp_h, subject";;
      files) EXTRACOLUMS="tx_hosts, rx_hosts, mime_type, filename";;
      smtp) EXTRACOLUMNS="mailfrom, rcptto, subject";;
    esac
    RESULTS="$RESULTS, $EXTRACOLUMNS"; GROUPBY="group by $(echo $RESULTS | sed 's/count(day), //g')";
  fi
}

BUILDSQL(){
  BUILDEXTRACOLUMNS
  BUILDTABLE
  SQLQUERY="SELECT $RESULTS FROM $TABLE "$PREWHERE" WHERE ( day>='"$STARTDATE"' $ANDSEARCHTERMS ) $GROUPBY ORDER BY day ASC"
}

SEARCH(){
  # XXX uncomment this for prod
  ssh -i $CHKEY -l feeds $CLICKHOUSE_SERVER "clickhouse-client --query=\"$SQLQUERY\"" "$TRANSLATERESULTS"
  if [ -z "$DEBUG" ]
  then
    :
  else
    echo "# DEBUG: logging enabled to $DEBUGLOG" >&2
    echo "$(date -j +%s),$USER,\"$SQLQUERY\"" >> $DEBUGLOG
  fi
}

# Check options and arguments after options which are indicated with a : and passed as OPTARG
while getopts "t:d:lcb:XVnQ:i:O:R:D:S:P:C:u:h:q:a:s:m:1:F:T:?" OPT; do
  case $OPT in
        # generic options
   d) STARTDATE=$(date -j -v-"$OPTARG"d +"%Y-%m-%d") ;; # set lookback
   l) SEARCHMODE="LIKE" ;;
   c) RESULTS="$RESULTS, count(day)" ;;
   b) RESULTS="$RESULTS, bar(count(day),0, $OPTARG, 20)"; TRANSLATERESULTS=" | tr \"\342\226\210\" \"-\"" ;;
   X) EXTRABIT="1" ;;
   V) RESULTS="*"; GROUPBY="";;
   Z) RESULTS="$RESULTS, file_src"; GROUPBY="$GROUPBY, file_src" ;;
   n) BUILDSQL; echo "# SQL = "; echo "# $SQLQUERY"; exit 0 ;;
   Q) SQLQUERY="$OPTARG"; SEARCH; exit 0;;
        # conn queries
   i) FLAVOR="conn"; TERM="ip"; ADDTERMS ;;
   O) FLAVOR="conn"; TERM="orig_h"; ADDTERMS; PREWHERE "ip" ;;
   R) FLAVOR="conn"; TERM="resp_h"; ADDTERMS; PREWHERE "ip" ;;
   D) FLAVOR="conn"; TERM="resp_p"; ADDHARDTERMS ;;
   S) FLAVOR="conn"; TERM="orig_p"; ADDHARDTERMS ;;
   P) FLAVOR="conn"; TERM="proto"; ADDHARDTERMS2 ;;
   C) FLAVOR="conn"; TERM="conn_state"; ADDHARDTERMS2 ;;
        # http queries
   u) FLAVOR="http"; TERM="uri"; ADDTERMS ;;
   h) FLAVOR="http"; TERM="host"; ADDTERMS ;;
        # dns queries
   q) CHECKEXCLUSIVEBIT; FLAVOR="dns"; TERM="query"; ADDTERMS ;;
   a) CHECKEXCLUSIVEBIT; FLAVOR="dns"; TERM="answers"; ADDTERMS ;;
        # ssl queries
   s) CHECKEXCLUSIVEBIT; FLAVOR="ssl"; TERM="server_name"; ADDTERMS ;;
        # files queries
   m) CHECKEXCLUSIVEBIT; FLAVOR="files"; TERM="md5"; ADDTERMS;;
   1) CHECKEXCLUSIVEBIT; FLAVOR="files"; TERM="sha1"; ADDTERMS ;;
        # smtp queries
   F) FLAVOR="smtp"; TERM="mailfrom"; ADDTERMS ;;
   T) FLAVOR="smtp"; TERM="rcptto"; ADDTERMS ;;
   ?) USAGE ;;
  esac
done

BUILDSQL

OUTPUT=$(SEARCH)

if [ -z "$OUTPUT" ]
then
  echo "stderr: no results found" >&2
else
  # print headers
  echo "# $RESULTS" | tr "," "\t" | sed 's/(day)//g'
  echo "$OUTPUT"
fi

###############################################################################
### CLEANUP, log, exit cleanly
# logger "$0 - Exited cleanly"
exit 0
